<script>
// =================================================================
// ZONE 1: GLOBAL CONFIGURATION & STATE
// =================================================================
const ALL_SPREADSHEET_CONFIGS = [
    { id: '1GKihQhjfR49Sn5CLTtGnXyY2q_I5JfcKjjiiYS1u1xE', name: 'CRMSYB หลัก' },
    { id: '18trRfG5PNX297RRj3FxMa9Qb93aAvudt0afrdoLQ_Wo', name: 'CRMSYB เขตอยุธยา ปทุมธานี สระบุรี' },
    { id: '1OGCOmijMU7IdMNLqAY5h3Urv0nfAJYwV1oAcAyVKzk', name: 'CRMSYB เขตสมุทรปราการ ฉะเชิงเทรา ชลบุรี' },
    { id: '1XQgJjPqnlyr33xLgMM3KA8NOJwgquOl_tTSkGWi4ASQ', name: 'CRMSYB เขต พระราม 2 บางบอน สมุทรสาคร ราชบุรี' }
];
const CUSTOMER_STATUS_TAB_NAMES_FE = ['ลูกค้า Key', 'ลูกค้าเกรด A', 'ลูกค้าเกรด B', 'ลูกค้าใหม่'];
const CUSTOMER_HEADERS_MAPPING = {
    'ID': 'id', 'ชื่อบริษัท': 'companyName', 'ที่อยู่': 'address', 'ผลิต': 'product',
    'สินค้าที่ใช้': 'usedProduct', 'เว็บไซต์': 'website', 'เบอร์โทร (หลัก)': 'primaryPhone',
    'อีเมล (หลัก)': 'primaryEmail', 'ชื่อผู้ติดต่อ 1': 'contact1Name', 'ตำแหน่ง 1': 'contact1Position',
    'เบอร์ติดต่อ 1': 'contact1Phone', 'อีเมล 1': 'contact1Email', 'ชื่อผู้ติดต่อ 2': 'contact2Name',
    'ตำแหน่ง 2': 'contact2Position', 'เบอร์ติดต่อ 2': 'contact2Phone', 'อีเมล 2': 'contact2Email',
    'ชื่อผู้ติดต่อ 3': 'contact3Name', 'ตำแหน่ง 3': 'contact3Position', 'เบอร์ติดต่อ 3': 'contact3Phone',
    'อีเมล 3': 'contact3Email', 'สถานะ': 'status', 'คอมเม้น': 'comment', 'วันที่บันทึก': 'dateRecorded',
    'วันที่สร้าง': 'dateCreated', 'วันที่แก้ไขล่าสุด': 'lastModified', 'จำนวนการติดต่อ': 'contactCount'
};
const CUSTOMER_TABLE_DISPLAY_ORDER = Object.keys(CUSTOMER_HEADERS_MAPPING);
const USER_ROLES = { NORMAL_USER: 'user ปกติ', SUPER_USER: 'super user' };
let currentActivePage = 'dashboard', currentUserRole = null, currentUsername = null, currentUserAllowedSheets = [], newCustomersChart, cumulativeGrowthChart, customerStatusChart, contactFrequencyChart, productUsageBarChart, productUsagePieChart, inactiveCustomersDataGlobal = [], AVAILABLE_PRODUCTS = [], selectedCustomerProducts = [], activeEditingRow = null, customerTableData = [], currentSortColumn = null, currentSortDirection = 'asc', activityLogData = [];

// =================================================================
// ZONE 2: DOM ELEMENT REFERENCES
// =================================================================
const fullScreenLoader = document.getElementById('fullScreenLoader');
const dashboardNav = document.getElementById('dashboardNav');
const homeNav = document.getElementById('homeNav'), customerListNav = document.getElementById('customerListNav'), reportNav = document.getElementById('reportNav'), settingsNav = document.getElementById('settingsNav'), adminNav = document.getElementById('adminNav'), loginLogoutNav = document.getElementById('loginLogoutNav'), loginLogoutText = document.getElementById('loginLogoutText');
const dashboardPage = document.getElementById('dashboardPage'), homePage = document.getElementById('homePage'), customerListPage = document.getElementById('customerListPage'), reportPage = document.getElementById('reportPage'), settingsPage = document.getElementById('settingsPage'), adminPage = document.getElementById('adminPage');
const mainHeaderTitle = document.getElementById('mainHeaderTitle'), mainActionButton = document.getElementById('mainActionButton'), userDisplayArea = document.getElementById('userDisplayArea'), loggedInUsernameSpan = document.getElementById('loggedInUsername');
const saveButton = document.getElementById('saveButton'), cancelButton = document.getElementById('cancelButton');
const dataForm = document.getElementById('dataForm'), companyNameInput = document.getElementById('companyName'), primaryPhoneInput = document.getElementById('primaryPhone'), primaryEmailInput = document.getElementById('primaryEmail'), websiteInput = document.getElementById('website'), contact1PhoneInput = document.getElementById('contact1Phone'), contact1EmailInput = document.getElementById('contact1Email'), contact2PhoneInput = document.getElementById('contact2Phone'), contact2EmailInput = document.getElementById('contact2Email'), contact3PhoneInput = document.getElementById('contact3Phone'), contact3EmailInput = document.getElementById('contact3Email'), statusSelect = document.getElementById('status'), targetSpreadsheetSelect = document.getElementById('targetSpreadsheetSelect'), usedProductDisplay = document.getElementById('usedProductDisplay'), usedProductHiddenInput = document.getElementById('usedProduct'), openProductSelectionModalButton = document.getElementById('openProductSelectionModalButton'), selectedProductsList = document.getElementById('selectedProductsList'), companyNameError = document.getElementById('companyNameError'), primaryPhoneError = document.getElementById('primaryPhoneError'), primaryEmailError = document.getElementById('primaryEmailError'), websiteError = document.getElementById('websiteError'), contact1PhoneError = document.getElementById('contact1PhoneError'), contact1EmailError = document.getElementById('contact1EmailError'), contact2PhoneError = document.getElementById('contact2PhoneError'), contact2EmailError = document.getElementById('contact2EmailError'), contact3PhoneError = document.getElementById('contact3PhoneError'), contact3EmailError = document.getElementById('contact3EmailError'), statusError = document.getElementById('statusError'), targetSpreadsheetSelectError = document.getElementById('targetSpreadsheetSelectError');
const viewSpreadsheetSelect = document.getElementById('viewSpreadsheetSelect'), customerStatusCheckboxesContainer = document.getElementById('customerStatusCheckboxes'), loadCustomerDataButton = document.getElementById('loadCustomerDataButton'), customerDataTable = document.getElementById('customerDataTable'), customerTableContainer = document.getElementById('customerTableContainer'), noCustomerDataMessage = document.getElementById('noCustomerDataMessage'), customerSearchInput = document.getElementById('customerSearchInput'), customerTableLoadingSpinner = document.getElementById('customerTableLoadingSpinner');
const reportSpreadsheetSelect = document.getElementById('reportSpreadsheetSelect'), reportTimeframe = document.getElementById('reportTimeframe'), timeframeFilterContainer = document.getElementById('timeframeFilterContainer'), generateReportButton = document.getElementById('generateReportButton'), noReportDataMessage = document.getElementById('noReportDataMessage'), growthReportTab = document.getElementById('growthReportTab'), statusReportTab = document.getElementById('statusReportTab'), contactPerformanceReportTab = document.getElementById('contactPerformanceReportTab'), productUsageReportTab = document.getElementById('productUsageReportTab'), growthReportContent = document.getElementById('growthReportContent'), statusReportContent = document.getElementById('statusReportContent'), contactPerformanceReportContent = document.getElementById('contactPerformanceReportContent'), productUsageReportContent = document.getElementById('productUsageReportContent'), newCustomersChartCanvas = document.getElementById('newCustomersChart'), cumulativeGrowthChartCanvas = document.getElementById('cumulativeGrowthChart'), loadingNewCustomersMessage = document.getElementById('loadingNewCustomersMessage'), loadingCumulativeGrowthMessage = document.getElementById('loadingCumulativeGrowthMessage'), customerStatusChartCanvas = document.getElementById('customerStatusChart'), loadingStatusReportMessage = document.getElementById('loadingStatusReportMessage'), noStatusReportDataMessage = document.getElementById('noStatusReportDataMessage'), customerStatusTableContainer = document.createElement('div'); customerStatusTableContainer.id = 'customerStatusTableContainer';
const contactFrequencyChartCanvas = document.getElementById('contactFrequencyChart'), inactiveCustomersTable = document.getElementById('inactiveCustomersTable'), inactiveCustomersTableContainer = document.getElementById('inactiveCustomersTableContainer'), inactiveDaysFilter = document.getElementById('inactiveDaysFilter'), inactiveDaysFilterContainer = document.getElementById('inactiveDaysFilterContainer'), loadingContactFrequencyMessage = document.getElementById('loadingContactFrequencyMessage'), loadingInactiveCustomersMessage = document.getElementById('loadingInactiveCustomersMessage'), noContactPerformanceDataMessage = document.getElementById('noContactPerformanceDataMessage'), noInactiveCustomersMessage = document.getElementById('noInactiveCustomersMessage'), productUsageBarChartCanvas = document.getElementById('productUsageBarChart'), productUsagePieChartCanvas = document.getElementById('productUsagePieChart'), loadingProductUsageBarChartMessage = document.getElementById('loadingProductUsageBarChartMessage'), loadingProductUsagePieChartMessage = document.getElementById('loadingProductUsagePieChartMessage'), noProductUsageDataMessage = document.getElementById('noProductUsageDataMessage');
const loginModal = document.getElementById('loginModal'), loginModalOverlay = document.getElementById('loginModalOverlay'), loginForm = document.getElementById('loginForm'), usernameInput = document.getElementById('username'), passwordInput = document.getElementById('password'), loginButton = document.getElementById('loginButton'), closeLoginModalButton = document.getElementById('closeLoginModal'), loginButtonText = document.getElementById('loginButtonText'), loginSpinner = document.getElementById('loginSpinner'), usernameError = document.getElementById('usernameError'), passwordError = document.getElementById('passwordError');
const addUserForm = document.getElementById('addUserForm'), newUsernameInput = document.getElementById('newUsername'), newPasswordInput = document.getElementById('newPassword'), newUserRoleSelect = document.getElementById('newUserRole'), newUserAllowedSheetsSelect = document.getElementById('newUserAllowedSheets'), usersDataTable = document.getElementById('usersDataTable'), noUsersMessage = document.getElementById('noUsersMessage'), addUserButtonText = document.getElementById('addUserButtonText'), addUserIcon = document.getElementById('addUserIcon'), addUserSpinner = document.getElementById('addUserSpinner'), usersTableLoadingSpinner = document.getElementById('usersTableLoadingSpinner'), newUsernameError = document.getElementById('newUsernameError'), newPasswordError = document.getElementById('newPasswordError'), newUserRoleError = document.getElementById('newUserRoleError'), newUserAllowedSheetsError = document.getElementById('newUserAllowedSheetsError');
const editUserModal = document.getElementById('editUserModal'), editUserModalOverlay = document.getElementById('editUserModalOverlay'), editUserForm = document.getElementById('editUserForm'), editOriginalUsernameInput = document.getElementById('editOriginalUsername'), editUsernameInput = document.getElementById('editUsername'), editPasswordInput = document.getElementById('editPassword'), editRoleSelect = document.getElementById('editRole'), editAllowedSheetsSelect = document.getElementById('editAllowedSheets'), cancelEditUserButton = document.getElementById('cancelEditUser'), editUserButtonText = document.getElementById('editUserButtonText'), editUserSpinner = document.getElementById('editUserSpinner'), editUsernameError = document.getElementById('editUsernameError'), editPasswordError = document.getElementById('editPasswordError'), editRoleError = document.getElementById('editRoleError'), editAllowedSheetsError = document.getElementById('editAllowedSheetsError');
const messageBox = document.getElementById('messageBox'), messageBoxOverlay = document.getElementById('messageBoxOverlay'), messageBoxTitle = document.getElementById('messageBoxTitle'), messageBoxContent = document.getElementById('messageBoxContent'), messageBoxClose = document.getElementById('messageBoxClose');
const commentHistoryModal = document.getElementById('commentHistoryModal'), commentHistoryModalOverlay = document.getElementById('commentHistoryModalOverlay'), commentHistoryContent = document.getElementById('commentHistoryContent'), commentHistoryClose = document.getElementById('commentHistoryClose'), newCommentSection = document.getElementById('newCommentSection'), newCommentTextarea = document.getElementById('newCommentTextarea'), saveNewCommentButton = document.getElementById('saveNewCommentButton'), saveNewCommentButtonText = document.getElementById('saveNewCommentButtonText'), saveNewCommentSpinner = document.getElementById('saveNewCommentSpinner'), newCommentTextareaError = document.getElementById('newCommentTextareaError');
const customTooltip = document.getElementById('customTooltip');
const productSelectionModal = document.getElementById('productSelectionModal'), productSelectionModalOverlay = document.getElementById('productSelectionModalOverlay'), productTypeSelect = document.getElementById('productTypeSelect'), productSelect = document.getElementById('productSelect'), productModelInput = document.getElementById('productModel'), productQuantityInput = document.getElementById('productQuantity'), addProductItemButton = document.getElementById('addProductItemButton'), currentProductSelectionList = document.getElementById('currentProductSelectionList'), noProductSelectedMessage = document.getElementById('noProductSelectedMessage'), saveProductSelectionButton = document.getElementById('saveProductSelection'), cancelProductSelectionButton = document.getElementById('cancelProductSelection'), productModelContainer = document.getElementById('productModelContainer'), productQuantityContainer = document.getElementById('productQuantityContainer'), productTypeSelectError = document.getElementById('productTypeSelectError'), productSelectError = document.getElementById('productSelectError'), productQuantityError = document.getElementById('productQuantityError');
const productSettingsContainer = document.getElementById('productSettingsContainer'), settingsAccessDenied = document.getElementById('settingsAccessDenied'), productSettingsTableBody = document.getElementById('productSettingsTableBody'), noProductSettingsMessage = document.getElementById('noProductSettingsMessage'), addProductBtn = document.getElementById('addProductBtn'), productSettingsLoadingSpinner = document.getElementById('productSettingsLoadingSpinner'), settingsContent = document.getElementById('settingsContent'), productSettingsTab = document.getElementById('productSettingsTab'), activityLogTab = document.getElementById('activityLogTab'), productSettingsContent = document.getElementById('productSettingsContent'), activityLogContent = document.getElementById('activityLogContent');
const activityLogTable = document.getElementById('activityLogTable'), activityLogTableBody = document.getElementById('activityLogTableBody'), noActivityLogMessage = document.getElementById('noActivityLogMessage'), activityLogLoadingSpinner = document.getElementById('activityLogLoadingSpinner'), activityLogSearchInput = document.getElementById('activityLogSearchInput');
const addProductModal = document.getElementById('addProductModal'), addProductModalOverlay = document.getElementById('addProductModalOverlay'), addProductModalTitle = document.getElementById('addProductModalTitle'), addProductForm = document.getElementById('addProductForm'), originalProductNameInput = document.getElementById('originalProductName'), newProductNameInput = document.getElementById('newProductName'), newProductTypeSelect = document.getElementById('newProductType'), cancelAddProductBtn = document.getElementById('cancelAddProductBtn'), addProductFormButtonText = document.getElementById('addProductFormButtonText'), addProductSpinner = document.getElementById('addProductSpinner'), newProductNameError = document.getElementById('newProductNameError'), newProductTypeError = document.getElementById('newProductTypeError');
const notificationContainer = document.getElementById('notificationContainer');
const kpiTotalCustomers = document.getElementById('kpiTotalCustomers'), kpiNewCustomers = document.getElementById('kpiNewCustomers'), kpiActivities = document.getElementById('kpiActivities'), kpiFollowUp = document.getElementById('kpiFollowUp');
const dashboardStatusChartCanvas = document.getElementById('dashboardStatusChart'), dashboardGrowthChartCanvas = document.getElementById('dashboardGrowthChart');
const dashboardFollowUpList = document.getElementById('dashboardFollowUpList'), dashboardActivityFeed = document.getElementById('dashboardActivityFeed');

// --- ALL OTHER ZONES AND FUNCTIONS WILL GO HERE ---

// ZONE 3: UTILITY & HELPER FUNCTIONS

function showNotification(t,e,o,n=3e3){const i=document.createElement("div");i.className=`notification-toast ${o}`,i.innerHTML=`<i class="icon fas ${"success"===o?"fa-check-circle":"error"===o?"fa-times-circle":"info"===o?"fa-info-circle":"fa-exclamation-triangle"}"></i><div><div class="title">${t}</div><div class="message">${e}</div></div>`,notificationContainer.appendChild(i),setTimeout(()=>{i.classList.add("show")},10),setTimeout(()=>{i.classList.remove("show"),i.addEventListener("transitionend",()=>i.remove())},n)}
function showMessageBox({ title, content, buttons = [] }) {
    messageBoxTitle.textContent = title;
    messageBoxContent.innerHTML = content;
    const existingButtonContainer = messageBox.querySelector('.message-box-buttons');
    if (existingButtonContainer) {
        existingButtonContainer.remove();
    }
    const buttonContainer = document.createElement('div');
    buttonContainer.className = 'message-box-buttons flex justify-end space-x-4 mt-6';

    if (buttons.length === 0) {
        buttons.push({
            text: 'ตกลง',
            class: 'bg-gray-500 hover:bg-gray-600 text-white',
            onClick: hideMessageBox
        });
    }

    buttons.forEach(btnConfig => {
        const button = document.createElement('button');
        button.textContent = btnConfig.text;
        button.className = `font-semibold py-2 px-6 rounded-lg shadow-md transition-all duration-200 ${btnConfig.class}`;
        button.addEventListener('click', () => {
            if (btnConfig.onClick) {
                btnConfig.onClick();
            }
            hideMessageBox();
        });
        buttonContainer.appendChild(button);
    });

    messageBox.appendChild(buttonContainer);
    // บรรทัดที่ทำให้เกิด Error ได้ถูกลบออกจากเวอร์ชันนี้แล้ว
    
    messageBox.classList.remove('hidden');
    messageBoxOverlay.classList.remove('hidden');
}
function hideMessageBox(){messageBox.classList.add("hidden"),messageBoxOverlay.classList.add("hidden")}
function showConfirmationModal(t,e,o){showMessageBox({title:t,content:e,buttons:[{text:"ยกเลิก",class:"bg-gray-300 hover:bg-gray-400 text-gray-800",onClick:()=>{}},{text:"ยืนยัน",class:"bg-red-600 hover:bg-red-700 text-white",onClick:o}]})}
function createCommentCellHTML(t){const e=t||"",o=e.split("\n").filter(t=>t.trim()!=="");let n="",i=!1;return o.length>0&&(n=o[0],i=o.length>1),`${escapeHtml(n)} ${i?`<button class="text-blue-600 hover:underline text-xs ml-2 view-comment-history-btn">[ดูประวัติ]</button>`:""}`}
function createUsedProductCellHTML(t){let e="ไม่มีสินค้าที่เลือก";try{const o=JSON.parse(t||"[]");Array.isArray(o)&&o.length>0&&(e=o.map(t=>`${escapeHtml(t.product)}${t.model?` (${escapeHtml(t.model)})`:""} x${t.quantity||1} (${escapeHtml(t.type)})`).join(", "))}catch(o){console.error("Error parsing usedProduct JSON:",o,"Value:",t),e=escapeHtml(t)}return e}
function showLoginModal(){hideFormErrors(loginForm),loginModal.classList.remove("hidden"),loginModalOverlay.classList.remove("hidden"),loginForm.reset()}
function hideLoginModal(){loginModal.classList.add("hidden"),loginModalOverlay.classList.add("hidden"),loginForm.reset(),hideFormErrors(loginForm)}
function showEditUserModal(t){hideFormErrors(editUserForm),editOriginalUsernameInput.value=t.username,editUsernameInput.value=t.username,editPasswordInput.value="",editRoleSelect.value=t.role,populateSpreadsheetSelect(editAllowedSheetsSelect,ALL_SPREADSHEET_CONFIGS),Array.from(editAllowedSheetsSelect.options).forEach(e=>{e.selected=t.allowedSheets.includes(e.value)}),editUserModal.classList.remove("hidden"),editUserModalOverlay.classList.remove("hidden")}
function hideEditUserModal(){editUserModal.classList.add("hidden"),editUserModalOverlay.classList.add("hidden"),editUserForm.reset(),hideFormErrors(editUserForm)}
function populateSpreadsheetSelect(t,e,o=null){t.innerHTML="";const n=o&&o.length>0?e.filter(t=>o.includes(t.name)):e;0===n.length?(t.innerHTML='<option value="">ไม่มีชีทที่อนุญาต</option>',t.disabled=!0):(t.disabled=!1,t.innerHTML=n.map((t,e)=>`<option value="${t.name}">${e+1}. ${t.name}</option>`).join(""))}
function showCommentHistory(t,e=!1){hideFormErrors(commentHistoryModal);const o=(t||"").split("\n").filter(t=>t.trim()!=="").map(t=>`<div class="p-2 border-b border-gray-200 last:border-b-0">${t.replace(/\[(.*?)\]/g,'<strong class="text-indigo-600">[$1]</strong>')}</div>`).join("");commentHistoryContent.innerHTML=o||'<p class="text-gray-500 text-center">ไม่มีประวัติคอมเม้น</p>',newCommentTextarea.value="",newCommentSection.classList.toggle("hidden",!e),saveNewCommentButton.classList.toggle("hidden",!e),commentHistoryClose.textContent=e?"ยกเลิก":"ปิด",commentHistoryModal.classList.remove("hidden"),commentHistoryModalOverlay.classList.remove("hidden")}
function hideCommentHistory(){commentHistoryModal.classList.add("hidden"),commentHistoryModalOverlay.classList.add("hidden"),activeEditingRow=null,hideFormErrors(commentHistoryModal)}
function showProductSelectionModal(t){hideFormErrors(productSelectionModal);try{selectedCustomerProducts=JSON.parse(t||"[]"),Array.isArray(selectedCustomerProducts)||(selectedCustomerProducts=[])}catch(t){console.error("Error parsing currentSelectedProductsJsonString:",t),selectedCustomerProducts=[]}populateProductSelectionDropdown(),renderCurrentProductSelectionList(),productSelectionModal.classList.remove("hidden"),productSelectionModalOverlay.classList.remove("hidden"),updateProductModalFieldsVisibility()}
function hideProductSelectionModal(){productSelectionModal.classList.add("hidden"),productSelectionModalOverlay.classList.add("hidden"),productTypeSelect.value="",productSelect.innerHTML='<option value="">เลือกสินค้า/บริการ</option>',productModelInput.value="",productQuantityInput.value="1",productModelContainer.classList.remove("hidden"),productQuantityContainer.classList.remove("hidden"),activeEditingRow=null,hideFormErrors(productSelectionModal)}
function populateProductSelectionDropdown(){productTypeSelect.innerHTML='<option value="">เลือกประเภท</option>';const t=[...new Set(AVAILABLE_PRODUCTS.map(t=>t.type))].sort();t.forEach(t=>{productTypeSelect.innerHTML+=`<option value="${t}">${t}</option>`}),productSelect.innerHTML='<option value="">เลือกสินค้า/บริการ</option>'}
function filterAndPopulateProductDropdown(){const t=productTypeSelect.value;productSelect.innerHTML='<option value="">เลือกสินค้า/บริการ</option>';const e=AVAILABLE_PRODUCTS.filter(e=>""===t||e.type===t);e.forEach(t=>{productSelect.innerHTML+=`<option value="${t.name}">${t.name}</option>`})}
function updateProductModalFieldsVisibility(){const t="บริการ"===productTypeSelect.value;productModelContainer.classList.toggle("hidden",t),productQuantityContainer.classList.toggle("hidden",t),t&&(productModelInput.value="",productQuantityInput.value="1")}
function renderCurrentProductSelectionList(){if(currentProductSelectionList.innerHTML="",0===selectedCustomerProducts.length)noProductSelectedMessage.classList.remove("hidden");else{noProductSelectedMessage.classList.add("hidden"),selectedCustomerProducts.forEach((t,e)=>{const o=document.createElement("div");o.className="flex items-center justify-between bg-gray-100 p-2 rounded-lg",o.innerHTML=`<span> ${escapeHtml(t.product)} ${t.model?`(${escapeHtml(t.model)})`:""} ${"สินค้า"===t.type?`x${t.quantity||1}`:""} (${escapeHtml(t.type)}) </span> <button type="button" data-index="${e}" class="remove-product-item text-red-500 hover:text-red-700 ml-4"> <i class="fas fa-times-circle" aria-hidden="true"></i> </button> `,currentProductSelectionList.appendChild(o)}),currentProductSelectionList.querySelectorAll(".remove-product-item").forEach(t=>t.addEventListener("click",e=>removeProductItemFromList(parseInt(e.currentTarget.dataset.index))))}}
function addProductItem(){hideFormErrors(productSelectionModal);const t=productSelect.value.trim(),e=productTypeSelect.value,o=productModelInput.value.trim(),n=parseInt(productQuantityInput.value);let i=!0;e||(showFormError(productTypeSelect,productTypeSelectError,"กรุณาเลือกประเภทสินค้า/บริการ"),i=!1),t||(showFormError(productSelect,productSelectError,"กรุณาเลือกชื่อสินค้า/บริการ"),i=!1),"สินค้า"===e&&(isNaN(n)||n<=0)&&(showFormError(productQuantityInput,productQuantityError,"จำนวนต้องเป็นตัวเลขที่มากกว่า 0"),i=!1),i&&(selectedCustomerProducts.push({product:t,type:e,model:"สินค้า"===e?o:"",quantity:"สินค้า"===e?n:null}),renderCurrentProductSelectionList(),productTypeSelect.value="",productSelect.innerHTML='<option value="">เลือกสินค้า/บริการ</option>',productModelInput.value="",productQuantityInput.value="1",updateProductModalFieldsVisibility())}
function removeProductItemFromList(t){selectedCustomerProducts.splice(t,1),renderCurrentProductSelectionList()}
function applySelectedProductsToForm(){usedProductHiddenInput.value=JSON.stringify(selectedCustomerProducts);const t=selectedCustomerProducts.length>0?selectedCustomerProducts.map(t=>`${escapeHtml(t.product)}${t.model?` (${escapeHtml(t.model)})`:""} x${t.quantity||1} (${escapeHtml(t.type)})`).join(", "):"เลือกสินค้าหรือบริการ";usedProductDisplay.querySelector("span").textContent=t,hideProductSelectionModal()}
function showAddProductModal(t=null){hideFormErrors(addProductForm),addProductForm.reset(),addProductModalTitle.textContent=t?"แก้ไขรายการ":"เพิ่มรายการใหม่",originalProductNameInput.value=t?t.name:"",newProductNameInput.value=t?t.name:"",newProductTypeSelect.value=t?t.type:"สินค้า",addProductModal.classList.remove("hidden"),addProductModalOverlay.classList.remove("hidden")}
function hideAddProductModal(){addProductModal.classList.add("hidden"),addProductModalOverlay.classList.add("hidden"),hideFormErrors(addProductForm)}
function showLoading(t){t.classList.remove("hidden")}
function hideLoading(t){t.classList.add("hidden")}
function validateField(t,e,o){return"SELECT"===t.tagName&&""===t.value?(showFormError(t,e,o),!1):"email"===t.type&&""!==t.value&&!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(t.value)?(showFormError(t,e,o),!1):"tel"===t.type&&""!==t.value&&!/^\d{9,10}$/.test(t.value)?(showFormError(t,e,o),!1):"url"===t.type&&""!==t.value&&!/^(https?:\/\/(?:www\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\.[^\s]{2,}|www\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\.[^\s]{2,}|https?:\/\/[a-zA-Z0-9]+\.[^\s]{2,}|[a-zA-Z0-9]+\.[^\s]{2,})$/.test(t.value)?(showFormError(t,e,o),!1):!t.hasAttribute("required")||""!==t.value.trim()?(hideFormError(t,e),!0):(showFormError(t,e,o),!1)}
function showFormError(t,e,o){t.classList.add("invalid"),e.textContent=o,e.classList.remove("hidden")}
function hideFormError(t,e){t.classList.remove("invalid"),e.classList.add("hidden"),e.textContent=""}
function hideFormErrors(t){t.querySelectorAll(".invalid").forEach(t=>t.classList.remove("invalid")),t.querySelectorAll(".text-red-500.italic:not(.hidden)").forEach(t=>t.classList.add("hidden"))}
function toggleButtonLoadingState(t,e,o,n,i,l=null,s){t.disabled=s,e.textContent=s?i:n,o.classList.toggle("hidden",!s),l&&l.classList.toggle("hidden",s)}
function showPage(pageId){[dashboardPage,homePage,customerListPage,reportPage,settingsPage,adminPage].forEach(page=>page&&page.classList.add("hidden")),[dashboardNav,homeNav,customerListNav,reportNav,settingsNav,adminNav].forEach(nav=>nav&&nav.classList.remove("active-nav","bg-gray-300"));const saveBtn=document.getElementById("saveButton"),cancelBtn=document.getElementById("cancelButton");switch(mainActionButton.classList.add("hidden"),saveBtn.classList.add("hidden"),cancelBtn.classList.add("hidden"),pageId){case"dashboard":dashboardPage.classList.remove("hidden"),dashboardNav.classList.add("active-nav","bg-gray-300"),mainHeaderTitle.textContent="แดชบอร์ดภาพรวม",mainActionButton.classList.remove("hidden");break;case"home":homePage.classList.remove("hidden"),homeNav.classList.add("active-nav","bg-gray-300"),mainHeaderTitle.textContent="เพิ่มข้อมูลลูกค้า",saveBtn.classList.remove("hidden"),cancelBtn.classList.remove("hidden"),dataForm.reset(),selectedCustomerProducts=[],usedProductDisplay.querySelector("span").textContent="เลือกสินค้าหรือบริการ",usedProductHiddenInput.value="",hideFormErrors(dataForm);break;case"customerList":customerListPage.classList.remove("hidden"),customerListNav.classList.add("active-nav","bg-gray-300"),mainHeaderTitle.textContent="ข้อมูลลูกค้า",mainActionButton.classList.remove("hidden"),populateCustomerStatusCheckboxes(viewSpreadsheetSelect.value);break;case"report":reportPage.classList.remove("hidden"),reportNav.classList.add("active-nav","bg-gray-300"),mainHeaderTitle.textContent="รายงาน",mainActionButton.classList.remove("hidden"),document.querySelector(".report-tab-button.active")?currentActivePage!=="report"&&generateReport():growthReportTab.click();break;case"settings":settingsPage.classList.remove("hidden"),settingsNav.classList.add("active-nav","bg-gray-300"),mainHeaderTitle.textContent="ตั้งค่าระบบ",mainActionButton.classList.remove("hidden"),currentUserRole===USER_ROLES.SUPER_USER?(settingsAccessDenied.classList.add("hidden"),settingsContent.classList.remove("hidden"),document.querySelector(".settings-tab-button.active")?document.querySelector(".settings-tab-button.active").click():productSettingsTab.click()):(settingsAccessDenied.classList.remove("hidden"),settingsContent.classList.add("hidden"));break;case"admin":adminPage.classList.remove("hidden"),adminNav.classList.add("active-nav","bg-gray-300"),mainHeaderTitle.textContent="จัดการผู้ใช้",mainActionButton.classList.remove("hidden"),currentUserRole===USER_ROLES.SUPER_USER?loadUsers():(showMessageBox({title:"ไม่ได้รับอนุญาต",content:"คุณไม่มีสิทธิ์เข้าถึงหน้านี้"}),showPage("dashboard"))}currentActivePage=pageId}
function updateUIForRole(){adminNav.classList.toggle("hidden",currentUserRole!==USER_ROLES.SUPER_USER),populateSpreadsheetSelect(targetSpreadsheetSelect,ALL_SPREADSHEET_CONFIGS,currentUserAllowedSheets),populateSpreadsheetSelect(viewSpreadsheetSelect,ALL_SPREADSHEET_CONFIGS,currentUserAllowedSheets),populateSpreadsheetSelect(reportSpreadsheetSelect,ALL_SPREADSHEET_CONFIGS,currentUserAllowedSheets),populateSpreadsheetSelect(newUserAllowedSheetsSelect,ALL_SPREADSHEET_CONFIGS),currentUsername?(loginLogoutText.textContent=`ออกจากระบบ (${currentUsername})`,loginLogoutNav.querySelector("i").className="fas fa-sign-out-alt text-2xl group-hover:scale-110 transition-transform duration-200",loginLogoutNav.dataset.tooltip=`ออกจากระบบ (${currentUsername})`,userDisplayArea.classList.add("flex"),userDisplayArea.classList.remove("hidden"),loggedInUsernameSpan.textContent=currentUsername):(loginLogoutText.textContent="ล็อกอิน",loginLogoutNav.querySelector("i").className="fas fa-sign-in-alt text-2xl group-hover:scale-110 transition-transform duration-200",loginLogoutNav.dataset.tooltip="ล็อกอิน",userDisplayArea.classList.add("hidden"),loggedInUsernameSpan.textContent="")}
async function populateCustomerStatusCheckboxes(t){customerStatusCheckboxesContainer.innerHTML="",t&&"ไม่มีชีทที่อนุญาต"!==t?(customerStatusCheckboxesContainer.innerHTML=`<div class="flex items-center"><input type="checkbox" id="status-all" name="statusFilter" value="ทั้งหมด" class="mr-2" checked><label for="status-all" class="text-gray-700 font-medium">ทั้งหมด</label></div>`+CUSTOMER_STATUS_TAB_NAMES_FE.map(t=>`<div class="flex items-center"><input type="checkbox" id="status-${t.replace(/\s/g,"-")}" name="statusFilter" value="${t}" class="mr-2"><label for="status-${t.replace(/\s/g,"-")}" class="text-gray-700 font-medium">${t}</label></div>`).join(""),loadCustomerData(viewSpreadsheetSelect.value,["ทั้งหมด"])):customerStatusCheckboxesContainer.innerHTML='<p class="text-gray-500">กรุณาเลือกชีทข้อมูลลูกค้า</p>'}
async function loadCustomerData(t,e){showLoading(customerTableLoadingSpinner),noCustomerDataMessage.classList.add("hidden"),customerDataTable.querySelector("thead").innerHTML="",customerDataTable.querySelector("tbody").innerHTML="",customerTableData=[],t&&!viewSpreadsheetSelect.innerHTML.includes("ไม่มีชีทที่อนุญาต")?e&&0!==e.length?google.script.run.withSuccessHandler(t=>{hideLoading(customerTableLoadingSpinner),t&&t.success&&Array.isArray(t.data)&&t.data.length>1?(t.data.slice(1).forEach(e=>{const o={};t.data[0].forEach((t,n)=>{o[CUSTOMER_HEADERS_MAPPING[t]]=e[n]}),customerTableData.push(o)}),renderCustomerTable(),showNotification("ข้อมูลลูกค้า","ดึงข้อมูลลูกค้าสำเร็จแล้ว","success")):(noCustomerDataMessage.textContent=t?t.message||"ไม่มีข้อมูลลูกค้าสำหรับสถานะนี้":"ไม่สามารถดึงข้อมูลลูกค้าได้",noCustomerDataMessage.classList.remove("hidden"),showNotification("ข้อผิดพลาด",t?t.message||"ไม่พบข้อมูลลูกค้า":"ไม่สามารถดึงข้อมูลลูกค้าได้","info"))}).withFailureHandler(t=>{hideLoading(customerTableLoadingSpinner),showMessageBox({title:"เกิดข้อผิดพลาด",content:"ไม่สามารถดึงข้อมูลลูกค้าได้: "+t.message}),showNotification("ข้อผิดพลาด","ไม่สามารถดึงข้อมูลลูกค้าได้","error")}).getCustomerData(t,e):(hideLoading(customerTableLoadingSpinner),noCustomerDataMessage.textContent="กรุณาเลือกแท็บข้อมูลที่ต้องการดู",noCustomerDataMessage.classList.remove("hidden")):(hideLoading(customerTableLoadingSpinner),noCustomerDataMessage.textContent="กรุณาเลือกชีทข้อมูลลูกค้าที่ต้องการดู",noCustomerDataMessage.classList.remove("hidden"))}
function renderCustomerTable(){let t=[...customerTableData];const e=customerSearchInput.value.toLowerCase().trim();e&&(t=t.filter(t=>Object.values(t).some(t=>String(t).toLowerCase().includes(e)))),currentSortColumn&&t.sort((t,e)=>{let o=t[currentSortColumn],n=e[currentSortColumn];if("dateCreated"===currentSortColumn||"lastModified"===currentSortColumn)o=o?new Date(o):new Date(0),n=n?new Date(n):new Date(0);else{if("contactCount"===currentSortColumn)return o=Number(o)||0,n=Number(n)||0,currentSortDirection==="asc"?o-n:n-o;if("string"==typeof o&&"string"==typeof n)return"asc"===currentSortDirection?o.localeCompare(n,"th"):n.localeCompare(o,"th")}return o<n?"asc"===currentSortDirection?-1:1:o>n?"asc"===currentSortDirection?1:-1:0});let o="<tr>";customerDataTable.querySelector("thead").querySelectorAll("th").forEach(t=>{t.classList.remove("sortable","asc","desc")}),CUSTOMER_TABLE_DISPLAY_ORDER.forEach(t=>{const e=CUSTOMER_HEADERS_MAPPING[t],n=["companyName","status","dateCreated","lastModified","contactCount"].includes(e)?`sortable ${e===currentSortColumn?currentSortDirection:""}`:"";o+=`<th class="${e}-column ${n}" data-sort-field="${e}">${t}</th>`}),o+="<th>Actions</th></tr>",customerDataTable.querySelector("thead").innerHTML=o;let n="";0===t.length?(noCustomerDataMessage.textContent="ไม่พบข้อมูลลูกค้าที่ตรงกับการค้นหา",noCustomerDataMessage.classList.remove("hidden")):(noCustomerDataMessage.classList.add("hidden"),t.forEach(t=>{const e=CUSTOMER_TABLE_DISPLAY_ORDER.map(e=>t[CUSTOMER_HEADERS_MAPPING[e]]);n+=`<tr data-row-id="${t.id}" data-spreadsheet-name="${viewSpreadsheetSelect.value}" data-original-row='${escapeHtml(JSON.stringify(e))}'>`,CUSTOMER_TABLE_DISPLAY_ORDER.forEach(e=>{const o=CUSTOMER_HEADERS_MAPPING[e],i=t[o]||"";n+=`<td class="${o}-column expandable-cell" data-full-comment='${"comment"===o?escapeHtml(i):""}'>`,"comment"===o?n+=createCommentCellHTML(i):"usedProduct"===o?n+=createUsedProductCellHTML(i):n+=escapeHtml(i),n+="</td>"}),n+='<td class="customer-actions-cell"><div class="customer-actions-buttons-wrapper"><button class="bg-blue-500 hover:bg-blue-600 text-white py-1 px-3 rounded-lg text-sm edit-customer-btn">แก้ไข</button><button class="bg-red-500 hover:bg-red-600 text-white py-1 px-3 rounded-lg text-sm delete-customer-btn ml-2">ลบ</button></div></td></tr>'})),customerDataTable.querySelector("tbody").innerHTML=n,updateCustomerActionButtonsVisibility()}
function escapeHtml(t){const e={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#039;"};return String(t||"").replace(/[&<>"']/g,t=>e[t])}
function toggleRowEditMode(t,e,o){const n=t.querySelectorAll("td:not(.customer-actions-cell)"),i=CUSTOMER_TABLE_DISPLAY_ORDER.reduce((t,e,n)=>{const i=CUSTOMER_HEADERS_MAPPING[e];return t[i]=o[n],t},{});n.forEach((t,o)=>{const n=CUSTOMER_HEADERS_MAPPING[CUSTOMER_TABLE_DISPLAY_ORDER[o]],l=i[n]||"";if(t.classList.remove("expanded"),e){t.dataset.originalValue=l;let e="";switch(n){case"status":e='<select class="w-full py-1 px-2 border rounded-md editable" data-field-name="status">',CUSTOMER_STATUS_TAB_NAMES_FE.forEach(t=>{e+=`<option value="${t}" ${l===t?"selected":""}>${t}</option>`}),e+="</select>";break;case"comment":e=`<input type="hidden" class="editable" data-field-name="comment" value="${escapeHtml(l)}"><button type="button" class="bg-gray-200 hover:bg-gray-300 text-gray-800 p-2 rounded-lg text-sm w-full edit-comment-btn" title="เพิ่ม/ดูคอมเม้น"><i class="fas fa-comment-dots"></i></button>`;break;case"usedProduct":e=`<input type="hidden" class="editable" data-field-name="usedProduct" value='${escapeHtml(l)}'><button type="button" class="bg-blue-200 hover:bg-blue-300 text-blue-800 p-2 rounded-lg text-sm w-full edit-used-product-btn" title="แก้ไขรายการสินค้า"><i class="fas fa-box"></i></button>`;break;case"address":e=`<textarea class="w-full py-1 px-2 border rounded-md editable" rows="2" data-field-name="${n}">${l}</textarea>`;break;case"id":case"dateRecorded":case"dateCreated":case"lastModified":case"contactCount":e=`<span>${escapeHtml(l)}</span>`;break;default:e=`<input type="text" class="w-full py-1 px-2 border rounded-md editable" value="${escapeHtml(l)}" data-field-name="${n}">`}t.innerHTML=e}else"comment"===n?t.innerHTML=createCommentCellHTML(l):"usedProduct"===n?t.innerHTML=createUsedProductCellHTML(l):t.innerHTML=escapeHtml(l)});const l=t.querySelector(".customer-actions-buttons-wrapper");e?l.innerHTML='<button class="bg-green-600 hover:bg-green-700 text-white py-1 px-3 rounded-lg text-sm save-customer-btn">บันทึก</button><button class="bg-gray-300 hover:bg-gray-400 text-gray-800 py-1 px-3 rounded-lg text-sm cancel-customer-btn ml-2">ยกเลิก</button>':(l.innerHTML='<button class="bg-blue-500 hover:bg-blue-600 text-white py-1 px-3 rounded-lg text-sm edit-customer-btn">แก้ไข</button><button class="bg-red-500 hover:bg-red-600 text-white py-1 px-3 rounded-lg text-sm delete-customer-btn ml-2">ลบ</button>',updateCustomerActionButtonsVisibility())}
async function saveCustomerRow(t,e,o){const n=Array.from(t.querySelectorAll(".editable")).reduce((t,e)=>(t[e.dataset.fieldName]=e.value,t),{}),i={targetSpreadsheetName:e,originalRow:o,updatedFields:n},l=t.querySelector(".save-customer-btn");l.disabled=!0,l.textContent="กำลังบันทึก...",google.script.run.withSuccessHandler(t=>{t.success?(showNotification("สำเร็จ!",t.message,"success"),setTimeout(()=>{const t=Array.from(customerStatusCheckboxesContainer.querySelectorAll("input:checked")).map(t=>t.value);loadCustomerData(viewSpreadsheetSelect.value,t.length>0?t:["ทั้งหมด"])},500)):(showNotification("ข้อผิดพลาด",t.message,"error"),l.disabled=!1,l.textContent="บันทึก")}).withFailureHandler(t=>{showNotification("ข้อผิดพลาด","ไม่สามารถบันทึกการแก้ไขได้: "+t.message,"error"),l.disabled=!1,l.textContent="บันทึก"}).updateCustomerData(i)}
async function deleteCustomerRow(t,e,o){const n=t.querySelector(".delete-customer-btn");n.disabled=!0,n.textContent="กำลังลบ...",google.script.run.withSuccessHandler(t=>{t.success?(showNotification("สำเร็จ!",t.message,"success"),setTimeout(()=>{const t=Array.from(customerStatusCheckboxesContainer.querySelectorAll("input:checked")).map(t=>t.value);loadCustomerData(viewSpreadsheetSelect.value,t.length>0?t:["ทั้งหมด"])},500)):(showNotification("ข้อผิดพลาด",t.message,"error"),n.disabled=!1,n.textContent="ลบ")}).withFailureHandler(t=>{showNotification("ข้อผิดพลาด","ไม่สามารถลบข้อมูลได้: "+t.message,"error"),n.disabled=!1,n.textContent="ลบ"}).deleteCustomerData({targetSpreadsheetName:e,originalRow:o})}
function updateCustomerActionButtonsVisibility(){document.querySelectorAll(".customer-actions-cell").forEach(t=>{const e=t.querySelector(".edit-customer-btn"),o=t.querySelector(".delete-customer-btn");e&&e.classList.toggle("hidden",!currentUserRole),o&&o.classList.toggle("hidden",currentUserRole!==USER_ROLES.SUPER_USER)})}
async function loadUsers() {
    showLoading(usersTableLoadingSpinner);
    noUsersMessage.classList.add('hidden');
    const tbody = usersDataTable.querySelector('tbody');
    tbody.innerHTML = ''; 

    google.script.run
        .withSuccessHandler(response => {
            hideLoading(usersTableLoadingSpinner);
            if (response && response.success && Array.isArray(response.data) && response.data.length > 1) {
                const [headers, ...users] = response.data;
                let bodyHtml = ''; // <--- จุดสำคัญคือต้องประกาศตัวแปรนี้ก่อนลูป
                users.forEach(userRow => {
                    const username = userRow[headers.indexOf('Username')];
                    const passwordHash = userRow[headers.indexOf('Password')];
                    const role = userRow[headers.indexOf('Role')];
                    const allowedSheetsString = userRow[headers.indexOf('Allowed Sheets')] || '';
                    bodyHtml += `<tr>
                        <td>${escapeHtml(username)}</td>
                        <td>${escapeHtml(passwordHash.substring(0, 10))}...</td>
                        <td>${escapeHtml(role)}</td>
                        <td>${escapeHtml(allowedSheetsString.split(',').filter(s => s.trim()).join(', '))}</td>
                        <td class="whitespace-nowrap">
                            <button class="bg-blue-500 hover:bg-blue-600 text-white py-1 px-3 rounded-lg text-sm edit-user-btn" data-username="${escapeHtml(username)}" data-role="${escapeHtml(role)}" data-allowed-sheets="${escapeHtml(allowedSheetsString)}">แก้ไข</button>
                            <button class="bg-red-500 hover:bg-red-600 text-white py-1 px-3 rounded-lg text-sm delete-user-btn ml-2" data-username="${escapeHtml(username)}">ลบ</button>
                        </td>
                    </tr>`;
                });
                tbody.innerHTML = bodyHtml;
            } else {
                noUsersMessage.textContent = response ? (response.message || 'ไม่มีข้อมูลผู้ใช้') : 'ไม่สามารถดึงข้อมูลผู้ใช้ได้';
                noUsersMessage.classList.remove('hidden');
            }
        })
        .withFailureHandler(error => {
            hideLoading(usersTableLoadingSpinner);
            showMessageBox({ title: 'เกิดข้อผิดพลาด', content: 'ไม่สามารถดึงข้อมูลผู้ใช้ได้: ' + error.message });
        })
        .getUsers();
}
function renderInactiveCustomersTable(t,e){const o=inactiveCustomersTable.querySelector("tbody");o.innerHTML="";const n=t.filter(t=>0==e||t.daysInactive>=e);noInactiveCustomersMessage.classList.toggle("hidden",n.length>0),n.forEach(t=>{let e="";switch(t.status){case"ลูกค้า Key":e="bg-yellow-100 text-yellow-800";break;case"ลูกค้าเกรด A":e="bg-green-100 text-green-800";break;case"ลูกค้าเกรด B":e="bg-blue-100 text-blue-800";break;case"ลูกค้าใหม่":e="bg-purple-100 text-purple-800";break;default:e="bg-gray-100 text-gray-800"}o.innerHTML+=`<tr class="bg-white border-b hover:bg-gray-50"><td class="px-4 py-2 text-sm font-medium text-gray-900">${escapeHtml(t.companyName)}</td><td class="px-4 py-2 text-sm text-center"><span class="px-2 py-1 rounded-full text-xs font-semibold ${e}">${escapeHtml(t.status)}</span></td><td class="px-4 py-2 text-sm text-gray-500">${escapeHtml(t.lastContact)}</td><td class="px-4 py-2 text-sm text-red-600 font-bold text-right">${t.daysInactive}</td></tr>`})}
function loadProductSettingsTable(){showLoading(productSettingsLoadingSpinner),noProductSettingsMessage.classList.add("hidden"),productSettingsTableBody.innerHTML="",AVAILABLE_PRODUCTS&&0!==AVAILABLE_PRODUCTS.length?(hideLoading(productSettingsLoadingSpinner),AVAILABLE_PRODUCTS.forEach(t=>{productSettingsTableBody.innerHTML+=`<tr><td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${escapeHtml(t.name)}</td><td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${escapeHtml(t.type)}</td><td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium space-x-2"><button class="text-indigo-600 hover:text-indigo-900 edit-product-btn" data-name="${escapeHtml(t.name)}" data-type="${escapeHtml(t.type)}">แก้ไข</button><button class="text-red-600 hover:text-red-900 delete-product-btn" data-name="${escapeHtml(t.name)}">ลบ</button></td></tr>`})):(hideLoading(productSettingsLoadingSpinner),noProductSettingsMessage.textContent="ไม่พบรายการสินค้า/บริการ",noProductSettingsMessage.classList.remove("hidden"))}
async function loadActivityLogs(searchTerm = '') {
    showLoading(activityLogLoadingSpinner);
    noActivityLogMessage.classList.add('hidden');
    activityLogTableBody.innerHTML = '';
    activityLogData = []; 

    google.script.run
        .withSuccessHandler(function(response) {
            hideLoading(activityLogLoadingSpinner);
            if (response && response.success && Array.isArray(response.data) && response.data.length > 1) {
                const headers = response.data[0];
                const logs = response.data.slice(1);
                
                // สร้าง mapping ของ header เพื่อการเข้าถึงข้อมูลที่ถูกต้อง
                const headerIndexMap = headers.reduce((map, header, index) => {
                    map[header] = index;
                    return map;
                }, {});

                // แปลงข้อมูลแต่ละแถวให้เป็น Object ที่ถูกต้อง
                activityLogData = logs.map(logRow => {
                    const obj = {};
                    obj['Timestamp'] = logRow[headerIndexMap['Timestamp']] || '';
                    obj['User Email'] = logRow[headerIndexMap['User Email']] || '';
                    obj['Action Type'] = logRow[headerIndexMap['Action Type']] || '';
                    obj['Details'] = logRow[headerIndexMap['Details']] || '';
                    obj['Status'] = logRow[headerIndexMap['Status']] || '';
                    return obj;
                });
                
                renderActivityLogTable(searchTerm); // เรียกใช้ฟังก์ชันแสดงผล
            } else {
                noActivityLogMessage.textContent = response ? (response.message || 'ไม่พบบันทึกกิจกรรม') : 'ไม่สามารถดึงข้อมูลได้';
                noActivityLogMessage.classList.remove('hidden');
            }
        })
        .withFailureHandler(function(error) {
            hideLoading(activityLogLoadingSpinner);
            showMessageBox({ title: 'เกิดข้อผิดพลาด', content: 'ไม่สามารถดึงบันทึกกิจกรรมได้: ' + error.message });
            showNotification('ข้อผิดพลาด', 'ไม่สามารถดึงบันทึกกิจกรรมได้', 'error');
        })
        .getActivityLogs();
}
function renderActivityLogTable(t){let e=[...activityLogData];if(t){const o=t.toLowerCase();e=e.filter(t=>Object.values(t).some(t=>String(t).toLowerCase().includes(o)))}activityLogTableBody.innerHTML="",noActivityLogMessage.classList.toggle("hidden",e.length>0),0===e.length&&(noActivityLogMessage.textContent="ไม่พบบันทึกกิจกรรมที่ตรงกับการค้นหา"),e.forEach(t=>{const e="Success"===t.Status?"text-green-600 font-semibold":"Failed"===t.Status?"text-red-600 font-semibold":"";activityLogTableBody.innerHTML+=`<tr><td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${escapeHtml(t.Timestamp)}</td><td class="px-6 py-4 text-sm text-gray-500">${escapeHtml(t["User Email"])}</td><td class="px-6 py-4 text-sm text-gray-500">${escapeHtml(t["Action Type"])}</td><td class="px-6 py-4 text-sm text-gray-500 break-words">${escapeHtml(t.Details)}</td><td class="px-6 py-4 whitespace-nowrap text-sm ${e}">${escapeHtml(t.Status)}</td></tr>`})}
function fetchReportData(t,e,o,n,i){i.classList.add("hidden"),n.forEach(showLoading);const l=reportSpreadsheetSelect.value;if(!l||reportSpreadsheetSelect.innerHTML.includes("ไม่มีชีทที่อนุญาต"))return n.forEach(hideLoading),i.textContent="กรุณาเลือกชีทข้อมูลสำหรับรายงาน",i.classList.remove("hidden"),void showNotification("ข้อผิดพลาด","กรุณาเลือกชีทข้อมูลสำหรับรายงาน","warning");const s={...e};google.script.run.withSuccessHandler(e=>{n.forEach(hideLoading),e&&e.success?e.data&&(Array.isArray(e.data)&&e.data.length>0||"object"==typeof e.data&&Object.keys(e.data).length>0&&Object.values(e.data).some(t=>Array.isArray(t)&&t.length>0)||e.data.labels&&e.data.labels.length>0)?o(e.data):(i.textContent=e.message||"ไม่มีข้อมูลสำหรับสร้างรายงาน",i.classList.remove("hidden")):(i.textContent=e?e.message||"ไม่สามารถดึงข้อมูลรายงานได้":"ไม่สามารถดึงข้อมูลรายงานได้",i.classList.remove("hidden"))}).withFailureHandler(e=>{n.forEach(hideLoading),showNotification("ข้อผิดพลาด",`ไม่สามารถดึงข้อมูลรายงานได้: ${e.message}`,"error")})[t](l,...Object.values(s))}
function generateReport(){const t=document.querySelector(".report-tab-button.active");if(!t)return;const e=t.id.replace("Tab","Content"),o={growthReportContent,statusReportContent,contactPerformanceReportContent,productUsageReportContent};Object.values(o).forEach(t=>t.classList.add("hidden")),o[e]&&o[e].classList.remove("hidden"),timeframeFilterContainer.classList.toggle("hidden","growthReportTab"!==t.id),inactiveDaysFilterContainer.classList.toggle("hidden","contactPerformanceReportTab"!==t.id);const n={growthReportTab:generateCustomerGrowthReport,statusReportTab:generateCustomerStatusReport,contactPerformanceReportTab:generateContactPerformanceReport,productUsageReportTab:generateProductUsageReport};n[t.id]&&n[t.id]()}
// --- END OF PART 4/5 ---
</script>
<script>
// --- START OF PART 5/5 ---
function generateCustomerGrowthReport(){window.newCustomersChart instanceof Chart&&window.newCustomersChart.destroy(),window.cumulativeGrowthChart instanceof Chart&&window.cumulativeGrowthChart.destroy(),fetchReportData("getReportData",{timeframe:reportTimeframe.value},t=>{const e=t.map(t=>t[0]),o=t.map(t=>t[1]),n=o.reduce((t,e)=>t.concat((t.length>0?t[t.length-1]:0)+e),[]);window.newCustomersChart=new Chart(newCustomersChartCanvas,{type:"bar",data:{labels:e,datasets:[{label:"จำนวนลูกค้าใหม่",data:o,backgroundColor:"rgba(75, 192, 192, 0.8)"}]},options:{responsive:!0,maintainAspectRatio:!1,scales:{y:{beginAtZero:!0,ticks:{stepSize:1}}},plugins:{title:{display:!0,text:`จำนวนลูกค้าใหม่ (${reportTimeframe.options[reportTimeframe.selectedIndex].text})`}}}}),window.cumulativeGrowthChart=new Chart(cumulativeGrowthChartCanvas,{type:"line",data:{labels:e,datasets:[{label:"จำนวนลูกค้ารวม",data:n,fill:!0,backgroundColor:"rgba(153, 102, 255, 0.2)",borderColor:"rgba(153, 102, 255, 1)"}]},options:{responsive:!0,maintainAspectRatio:!1,scales:{y:{beginAtZero:!0}},plugins:{title:{display:!0,text:"การเติบโตสะสมของลูกค้า"}}}})},[loadingNewCustomersMessage,loadingCumulativeGrowthMessage],noReportDataMessage)}
function generateCustomerStatusReport(){window.customerStatusChart instanceof Chart&&window.customerStatusChart.destroy(),customerStatusTableContainer.innerHTML="",fetchReportData("getCustomerStatusReportData",{},t=>{const e=t.map(t=>t[0]),o=t.map(t=>t[1]),n=o.reduce((t,e)=>t+e,0);window.customerStatusChart=new Chart(customerStatusChartCanvas,{type:"pie",data:{labels:e,datasets:[{label:"จำนวนลูกค้า",data:o,backgroundColor:["rgba(255, 99, 132, 0.8)","rgba(54, 162, 235, 0.8)","rgba(255, 206, 86, 0.8)","rgba(75, 192, 192, 0.8)","rgba(153, 102, 255, 0.8)","rgba(255, 159, 64, 0.8)"],borderColor:"#fff",borderWidth:2}]},options:{responsive:!0,maintainAspectRatio:!1,plugins:{legend:{position:"top"},title:{display:!0,text:`สัดส่วนลูกค้าในชีท: ${reportSpreadsheetSelect.value}`},datalabels:{color:"#fff",font:{weight:"bold",size:14},formatter:(t,e)=>(t/e.chart.data.datasets[0].data.reduce((t,e)=>t+e,0)*100).toFixed(1)+"%"}}},plugins:[ChartDataLabels]});let i='<div class="mt-8 p-4 border rounded-lg shadow-sm"><h4 class="text-lg font-semibold text-gray-600 mb-4 text-center">สรุปตามสถานะ</h4><table class="w-full text-sm text-left text-gray-500"><thead class="text-xs text-gray-700 uppercase bg-gray-50"><tr><th scope="col" class="px-6 py-3">สถานะ</th><th scope="col" class="px-6 py-3 text-right">จำนวน</th><th scope="col" class="px-6 py-3 text-right">%</th></tr></thead><tbody>';e.forEach((t,e)=>{const l=n>0?(o[e]/n*100).toFixed(2):0;i+=`<tr class="bg-white border-b"><td class="px-6 py-4 font-medium text-gray-900">${escapeHtml(t)}</td><td class="px-6 py-4 text-right">${o[e]}</td><td class="px-6 py-4 text-right">${l}%</td></tr>`}),i+=`<tr class="bg-gray-100 font-bold"><td class="px-6 py-4">รวม</td><td class="px-6 py-4 text-right">${n}</td><td class="px-6 py-4 text-right">100.00%</td></tr></tbody></table></div>`,customerStatusTableContainer.innerHTML=i},[loadingStatusReportMessage],noStatusReportDataMessage)}
function generateContactPerformanceReport(){window.contactFrequencyChart instanceof Chart&&window.contactFrequencyChart.destroy(),inactiveCustomersTable.querySelector("tbody").innerHTML="",fetchReportData("getContactPerformanceReport",{},t=>{const e=(t.contactFrequency||[]).slice(0,30);inactiveCustomersDataGlobal=t.inactiveCustomers||[],window.contactFrequencyChart=new Chart(contactFrequencyChartCanvas,{type:"bar",data:{labels:e.map(t=>`${t.name} (${t.status})`),datasets:[{label:"จำนวนครั้งที่ติดต่อ",data:e.map(t=>t.count),backgroundColor:["rgba(255, 99, 132, 0.8)","rgba(54, 162, 235, 0.8)","rgba(255, 206, 86, 0.8)","rgba(75, 192, 192, 0.8)","rgba(153, 102, 255, 0.8)"],borderWidth:1}]},options:{indexAxis:"y",responsive:!0,maintainAspectRatio:!1,scales:{x:{beginAtZero:!0,ticks:{stepSize:1}}},plugins:{title:{display:!0,text:"ความถี่ในการติดต่อลูกค้า"}}}}),renderInactiveCustomersTable(inactiveCustomersDataGlobal,parseInt(inactiveDaysFilter.value))},[loadingContactFrequencyMessage,loadingInactiveCustomersMessage],noContactPerformanceDataMessage)}
function generateProductUsageReport(){window.productUsageBarChart instanceof Chart&&window.productUsageBarChart.destroy(),window.productUsagePieChart instanceof Chart&&window.productUsagePieChart.destroy(),fetchReportData("getProductUsageReport",{},t=>{const e=(t.popularProducts||[]).slice(0,30);window.productUsageBarChart=new Chart(productUsageBarChartCanvas,{type:"bar",data:{labels:e.map(t=>t.name),datasets:[{label:"จำนวนลูกค้าที่ใช้",data:e.map(t=>t.count),backgroundColor:"rgba(54, 162, 235, 0.8)"}]},options:{indexAxis:"y",responsive:!0,maintainAspectRatio:!1,scales:{x:{beginAtZero:!0,ticks:{stepSize:1}}},plugins:{title:{display:!0,text:"สินค้า/บริการยอดนิยม"}}}});const o=t.productProportions||[];window.productUsagePieChart=new Chart(productUsagePieChartCanvas,{type:"pie",data:{labels:o.map(t=>t.name),datasets:[{label:"สัดส่วนลูกค้า",data:o.map(t=>t.count),backgroundColor:["rgba(255, 99, 132, 0.8)","rgba(54, 162, 235, 0.8)","rgba(255, 206, 86, 0.8)","rgba(75, 192, 192, 0.8)","rgba(153, 102, 255, 0.8)"]}]},options:{responsive:!0,maintainAspectRatio:!1,plugins:{legend:{position:"top"},title:{display:!0,text:`สัดส่วนลูกค้าตามประเภทสินค้า/บริการ`},datalabels:{color:"#fff",font:{weight:"bold"},formatter:(t,e)=>(t/e.chart.data.datasets[0].data.reduce((t,e)=>t+e,0)*100).toFixed(1)+"%"}}},plugins:[ChartDataLabels]})},[loadingProductUsageBarChartMessage,loadingProductUsagePieChartMessage],noProductUsageDataMessage)}
function loadDashboardData(){google.script.run.withSuccessHandler(renderDashboard).withFailureHandler(t=>{showNotification("ข้อผิดพลาด","ไม่สามารถโหลดข้อมูลแดชบอร์ดได้: "+t.message,"error")}).getDashboardData()}
function renderDashboard(response) { if (!response || !response.success) { return showNotification("ข้อผิดพลาด", response.message || "ข้อมูลแดชบอร์ดไม่ถูกต้อง", "error"); } const dashboardData = response.data; kpiTotalCustomers.textContent = dashboardData.kpis.totalCustomers; kpiNewCustomers.textContent = dashboardData.kpis.newCustomersThisMonth; kpiFollowUp.textContent = dashboardData.kpis.followUpCount; let keyCustomerCount = 0; if (dashboardData.charts.status && dashboardData.charts.status.labels) { const statusLabels = dashboardData.charts.status.labels; const statusCounts = dashboardData.charts.status.data; const keyIndex = statusLabels.indexOf('ลูกค้า Key'); const gradeAIndex = statusLabels.indexOf('ลูกค้าเกรด A'); if (keyIndex !== -1) { keyCustomerCount += statusCounts[keyIndex]; } if (gradeAIndex !== -1) { keyCustomerCount += statusCounts[gradeAIndex]; } } const kpiActivitiesCard_Title = kpiActivities.parentElement.querySelector('.text-gray-500'); const kpiActivitiesCard_IconContainer = kpiActivities.parentElement.querySelector('div:first-child'); kpiActivitiesCard_Title.textContent = 'ลูกค้าคนสำคัญ (Key+A)'; kpiActivities.textContent = keyCustomerCount; if (kpiActivitiesCard_IconContainer) { kpiActivitiesCard_IconContainer.className = "bg-purple-100 p-3 rounded-full"; kpiActivitiesCard_IconContainer.querySelector('i').className = "fas fa-crown text-2xl text-purple-600"; } if (window.dashboardStatusChart instanceof Chart) { window.dashboardStatusChart.destroy(); } if (dashboardData.charts.status && dashboardData.charts.status.labels.length > 0) { window.dashboardStatusChart = new Chart(dashboardStatusChartCanvas, { type: 'doughnut', data: { labels: dashboardData.charts.status.labels, datasets: [{ data: dashboardData.charts.status.data, backgroundColor: ["#3B82F6", "#10B981", "#F59E0B", "#EF4444", "#8B5CF6", "#6366F1"], hoverOffset: 4 }] }, options: { responsive: true, maintainAspectRatio: false, plugins: { legend: { position: 'right' } } } }); } if (window.dashboardGrowthChart instanceof Chart) { window.dashboardGrowthChart.destroy(); } if (dashboardData.charts.growth && dashboardData.charts.growth.labels.length > 0) { window.dashboardGrowthChart = new Chart(dashboardGrowthChartCanvas, { type: 'bar', data: { labels: dashboardData.charts.growth.labels, datasets: [{ label: 'ลูกค้าใหม่', data: dashboardData.charts.growth.data, backgroundColor: 'rgba(75, 192, 192, 0.7)', borderColor: 'rgba(75, 192, 192, 1)', borderWidth: 1 }] }, options: { responsive: true, maintainAspectRatio: false, scales: { y: { beginAtZero: true, ticks: { stepSize: 1 } } }, plugins: { legend: { display: false } } } }); } let followUpHtml = ''; if (dashboardData.lists.followUps && dashboardData.lists.followUps.length > 0) { dashboardData.lists.followUps.forEach(item => { followUpHtml += `<div class="flex justify-between items-center text-sm py-2 border-b border-gray-100 last:border-b-0"><span class="text-gray-700">${escapeHtml(item.name)}</span><span class="text-red-500 font-semibold">${item.days} วัน</span></div>`; }); } else { followUpHtml = '<p class="text-center text-gray-400">ไม่มีลูกค้าที่ต้องติดตาม</p>'; } dashboardFollowUpList.innerHTML = followUpHtml; const activityFeedContainer = document.getElementById('dashboardActivityFeed'); const activityFeedTitle = activityFeedContainer.parentElement.querySelector('h3'); activityFeedTitle.textContent = "ลูกค้าที่เพิ่มล่าสุด (5 รายการ)"; let newCustomerHtml = ''; const latestCustomers = dashboardData.lists.latestCustomers; if (latestCustomers && latestCustomers.length > 0) { latestCustomers.forEach(customer => { newCustomerHtml += `<div class="text-sm py-2 border-b border-gray-100 last:border-b-0"><div class="flex justify-between items-center"><p class="text-gray-800 font-medium">${escapeHtml(customer.name)}</p><p class="text-xs text-gray-400">${escapeHtml(customer.date)}</p></div><p class="text-xs text-gray-500 mt-1 truncate" title="${escapeHtml(customer.comment)}">คอมเมนต์: ${escapeHtml(customer.comment) || '-'}</p></div>`; }); } else { newCustomerHtml = '<p class="text-center text-gray-400">ยังไม่มีข้อมูลลูกค้าใหม่</p>'; } activityFeedContainer.innerHTML = newCustomerHtml; fullScreenLoader.classList.add('hidden'); }

function loadDashboardData() {
    // This function will show loading spinners later if we want
    google.script.run
        .withSuccessHandler(renderDashboard)
        .withFailureHandler(error => {
            showNotification("ข้อผิดพลาด", "ไม่สามารถโหลดข้อมูลแดชบอร์ดได้: " + error.message, "error");
        })
        .getDashboardData();
}

function renderDashboard(response) {
    // Hide the main loader now that we have data (or an error)
    if(fullScreenLoader) {
        fullScreenLoader.classList.add('hidden');
    }

    if (!response || !response.success) {
        if(response.message !== 'ผู้ใช้ไม่ได้ล็อกอิน') { // Don't show error if it's just a login issue
             showNotification("ข้อผิดพลาด", response.message || "ข้อมูลแดชบอร์ดไม่ถูกต้อง", "error");
        }
        return; 
    }
    const dashboardData = response.data;

    // --- Render KPIs ---
    kpiTotalCustomers.textContent = dashboardData.kpis.totalCustomers;
    kpiNewCustomers.textContent = dashboardData.kpis.newCustomersThisMonth;
    kpiFollowUp.textContent = dashboardData.kpis.followUpCount;
    
    let keyCustomerCount = 0;
    if (dashboardData.charts.status && dashboardData.charts.status.labels) {
        const statusLabels = dashboardData.charts.status.labels;
        const statusCounts = dashboardData.charts.status.data;
        const keyIndex = statusLabels.indexOf('ลูกค้า Key');
        const gradeAIndex = statusLabels.indexOf('ลูกค้าเกรด A');
        if (keyIndex !== -1) { keyCustomerCount += statusCounts[keyIndex]; }
        if (gradeAIndex !== -1) { keyCustomerCount += statusCounts[gradeAIndex]; }
    }
    kpiActivities.textContent = keyCustomerCount;
    
    // --- Render Status Chart ---
    if (window.dashboardStatusChart instanceof Chart) { window.dashboardStatusChart.destroy(); }
    if (dashboardData.charts.status && dashboardData.charts.status.labels.length > 0) {
        window.dashboardStatusChart = new Chart(dashboardStatusChartCanvas, {
            type: 'doughnut',
            data: {
                labels: dashboardData.charts.status.labels,
                datasets: [{
                    data: dashboardData.charts.status.data,
                    backgroundColor: ["#3B82F6", "#10B981", "#F59E0B", "#EF4444", "#8B5CF6", "#6366F1"],
                    hoverOffset: 4
                }]
            },
            options: { responsive: true, maintainAspectRatio: false, plugins: { legend: { position: 'right' } } }
        });
    }
    
    // --- Render Growth Chart ---
    if (window.dashboardGrowthChart instanceof Chart) { window.dashboardGrowthChart.destroy(); }
    if (dashboardData.charts.growth && dashboardData.charts.growth.labels.length > 0) {
        window.dashboardGrowthChart = new Chart(dashboardGrowthChartCanvas, {
            type: 'bar',
            data: {
                labels: dashboardData.charts.growth.labels,
                datasets: [{
                    label: 'ลูกค้าใหม่',
                    data: dashboardData.charts.growth.data,
                    backgroundColor: 'rgba(75, 192, 192, 0.7)',
                    borderColor: 'rgba(75, 192, 192, 1)',
                    borderWidth: 1
                }]
            },
            options: { responsive: true, maintainAspectRatio: false, scales: { y: { beginAtZero: true, ticks: { stepSize: 1 } } }, plugins: { legend: { display: false } } }
        });
    }

    // --- Render Lists ---
    let followUpHtml = '';
    if (dashboardData.lists.followUps.length > 0) {
        dashboardData.lists.followUps.forEach(item => {
            followUpHtml += `<div class="flex justify-between items-center text-sm py-2 border-b border-gray-100 last:border-b-0"><span class="text-gray-700">${escapeHtml(item.name)}</span><span class="text-red-500 font-semibold">${item.days} วัน</span></div>`;
        });
    } else {
        followUpHtml = '<p class="text-center text-gray-400">ไม่มีลูกค้าที่ต้องติดตาม</p>';
    }
    dashboardFollowUpList.innerHTML = followUpHtml;

    let newCustomerHtml = '';
    const latestCustomers = dashboardData.lists.latestCustomers; 
    if (latestCustomers && latestCustomers.length > 0) {
        latestCustomers.forEach(customer => {
            newCustomerHtml += `<div class="text-sm py-2 border-b border-gray-100 last:border-b-0"><div class="flex justify-between items-center"><p class="text-gray-800 font-medium">${escapeHtml(customer.name)}</p><p class="text-xs text-gray-400">${escapeHtml(customer.date)}</p></div><p class="text-xs text-gray-500 mt-1 truncate" title="${escapeHtml(customer.comment)}">คอมเมนต์: ${escapeHtml(customer.comment) || '-'}</p></div>`;
        });
    } else {
        newCustomerHtml = '<p class="text-center text-gray-400">ยังไม่มีข้อมูลลูกค้าใหม่</p>';
    }
    dashboardActivityFeed.innerHTML = newCustomerHtml;
}

// ZONE 5: EVENT LISTENERS
document.addEventListener('DOMContentLoaded', async () => {
    statusReportContent.appendChild(customerStatusTableContainer);
    try {
        const [initialRole, initialUsername, initialAllowedSheets, productResponse] = await Promise.all([
            new Promise(resolve => google.script.run.withSuccessHandler(resolve).getLoggedInUserRole()),
            new Promise(resolve => google.script.run.withSuccessHandler(resolve).getLoggedInUsername()),
            new Promise(resolve => google.script.run.withSuccessHandler(resolve).getLoggedInUserAllowedSheets()),
            new Promise(resolve => google.script.run.withSuccessHandler(resolve).getAvailableProductsFromSheet())
        ]);
        if (initialRole) {
            currentUserRole = initialRole;
            currentUsername = initialUsername;
            currentUserAllowedSheets = initialAllowedSheets;
        }
        if (productResponse && productResponse.success) {
            AVAILABLE_PRODUCTS = productResponse.data;
        } else {
            showNotification('ข้อผิดพลาด', 'ไม่สามารถโหลดรายการสินค้าได้: ' + (productResponse ? productResponse.message : 'Unknown error'), 'error');
        }
    } catch (error) {
        showNotification('ข้อผิดพลาด', 'ไม่สามารถเชื่อมต่อกับระบบได้ กรุณาลองรีเฟรช', 'error');
    }
    updateUIForRole();
    showPage('dashboard');
    loadDashboardData();

    [dashboardNav, homeNav, customerListNav, reportNav, settingsNav, adminNav].forEach(nav => {
        if(nav) nav.addEventListener('click', e => { e.preventDefault(); showPage(nav.id.replace('Nav', '')); });
    });
    // --- วางโค้ดสำหรับปุ่ม "สินค้าที่ใช้" ตรงนี้ได้เลยครับ ---
    usedProductDisplay.addEventListener('click', () => {
        activeEditingRow = null; 
        showProductSelectionModal(usedProductHiddenInput.value);
    });
    openProductSelectionModalButton.addEventListener('click', () => {
        activeEditingRow = null;
        showProductSelectionModal(usedProductHiddenInput.value);
    });
    // ----------------------------------------------------

    mainActionButton.addEventListener('click', () => showPage('home'));

    loginLogoutNav.addEventListener('click', async e => {
        e.preventDefault();
        if (currentUsername) {
            google.script.run.withSuccessHandler(res => {
                if (res.success) {
                    currentUserRole = null; currentUsername = null; currentUserAllowedSheets = [];
                    updateUIForRole();
                    showNotification('สำเร็จ!', res.message, 'success');
                    showPage('dashboard');
                    loadDashboardData();
                } else { showNotification('ข้อผิดพลาด', res.message, 'error'); }
            }).doLogout();
        } else {
            showLoginModal();
        }
    });

    loginForm.addEventListener('submit', async e => {
        e.preventDefault();
        hideFormErrors(loginForm);
        if (!validateField(usernameInput, usernameError, 'กรุณากรอกชื่อผู้ใช้') || !validateField(passwordInput, passwordError, 'กรุณากรอกรหัสผ่าน')) {
            return showNotification('ข้อผิดพลาด', 'กรุณากรอกข้อมูลให้ครบถ้วน', 'error');
        }
        toggleButtonLoadingState(loginButton, loginButtonText, loginSpinner, 'เข้าสู่ระบบ', 'กำลังเข้าสู่ระบบ...', null, true);
        google.script.run.withSuccessHandler(res => {
            if (res.success) {
                currentUserRole = res.role; currentUsername = usernameInput.value; currentUserAllowedSheets = res.allowedSheets;
                hideLoginModal();
                showNotification('สำเร็จ!', res.message, 'success');
                showPage('dashboard');
                updateUIForRole();
                loadDashboardData();
            } else {
                showNotification('ข้อผิดพลาด', res.message, 'error');
                showFormError(usernameInput, usernameError, 'ชื่อผู้ใช้หรือรหัสผ่านไม่ถูกต้อง');
                showFormError(passwordInput, passwordError, ' ');
            }
            toggleButtonLoadingState(loginButton, loginButtonText, loginSpinner, 'เข้าสู่ระบบ', 'กำลังเข้าสู่ระบบ...', null, false);
        }).withFailureHandler(err => {
            showNotification('ข้อผิดพลาด', err.message, 'error');
            toggleButtonLoadingState(loginButton, loginButtonText, loginSpinner, 'เข้าสู่ระบบ', 'กำลังเข้าสู่ระบบ...', null, false);
        }).doLogin(usernameInput.value, passwordInput.value);
    });

    saveButton.addEventListener('click', async event => {
        event.preventDefault();
        hideFormErrors(dataForm);
        if (!currentUsername) {
            showNotification('เข้าสู่ระบบ', 'กรุณาเข้าสู่ระบบก่อนบันทึกข้อมูล', 'warning');
            return showLoginModal();
        }
        let isValid = [
            validateField(companyNameInput, companyNameError, 'กรุณากรอกชื่อบริษัท'),
            validateField(statusSelect, statusError, 'กรุณาเลือกสถานะลูกค้า'),
            validateField(targetSpreadsheetSelect, targetSpreadsheetSelectError, 'กรุณาเลือกชีทที่จะบันทึก'),
        ].every(v => v);
        if (!isValid) return showNotification('ข้อผิดพลาด', 'กรุณากรอกข้อมูลให้ถูกต้อง', 'error');
        toggleButtonLoadingState(saveButton, saveButtonText, saveSpinner, 'บันทึกข้อมูล', 'กำลังบันทึก...', saveIcon, true);
        const data = Object.fromEntries(new FormData(dataForm).entries());
        data.targetSpreadsheetName = targetSpreadsheetSelect.value;
        google.script.run.withSuccessHandler(res => {
            if (res.success) {
                showNotification('สำเร็จ!', res.message, 'success');
                showPage('dashboard');
                loadDashboardData();
            } else {
                showNotification('ข้อผิดพลาด', res.message, 'error');
            }
            toggleButtonLoadingState(saveButton, saveButtonText, saveSpinner, 'บันทึกข้อมูล', 'กำลังบันทึก...', saveIcon, false);
        }).withFailureHandler(err => {
            showNotification('ข้อผิดพลาด', err.message, 'error');
            toggleButtonLoadingState(saveButton, saveButtonText, saveSpinner, 'บันทึกข้อมูล', 'กำลังบันทึก...', saveIcon, false);
        }).doPost(data);
    });
    
    cancelButton.addEventListener('click', () => {
        showPage('dashboard'); 
    });

    viewSpreadsheetSelect.addEventListener('change', () => populateCustomerStatusCheckboxes(viewSpreadsheetSelect.value));
    loadCustomerDataButton.addEventListener('click', () => {
        const selected = Array.from(customerStatusCheckboxesContainer.querySelectorAll('input:checked')).map(cb => cb.value);
        loadCustomerData(viewSpreadsheetSelect.value, selected.length > 0 ? selected : ['ทั้งหมด']);
    });
    customerStatusCheckboxesContainer.addEventListener('change', e => {
        if (e.target.name === 'statusFilter') {
            const allCheckbox = customerStatusCheckboxesContainer.querySelector('input[value="ทั้งหมด"]');
            if (e.target.value === 'ทั้งหมด' && e.target.checked) {
                customerStatusCheckboxesContainer.querySelectorAll('input[name="statusFilter"]:not([value="ทั้งหมด"])').forEach(cb => cb.checked = false);
            } else if (e.target.value !== 'ทั้งหมด' && e.target.checked) {
                if (allCheckbox) allCheckbox.checked = false;
            }
            const selected = Array.from(customerStatusCheckboxesContainer.querySelectorAll('input:checked')).map(cb => cb.value);
            if (selected.length === 0 && allCheckbox) allCheckbox.checked = true;
            loadCustomerData(viewSpreadsheetSelect.value, selected.length > 0 ? selected : ['ทั้งหมด']);
        }
    });
    customerDataTable.querySelector('thead').addEventListener('click', e => {
        const headerCell = e.target.closest('th.sortable');
        if (!headerCell) return;
        const sortField = headerCell.dataset.sortField;
        currentSortDirection = (currentSortColumn === sortField && currentSortDirection === 'asc') ? 'desc' : 'asc';
        currentSortColumn = sortField;
        renderCustomerTable();
    });
    customerSearchInput.addEventListener('keyup', () => renderCustomerTable());
    
    customerDataTable.addEventListener('click', async e => {
        const button = e.target.closest('button');
        if (!button) return;
        const row = button.closest('tr');
        if (!row) return;
        const spreadsheetName = row.dataset.spreadsheetName;
        const originalRowData = JSON.parse(row.dataset.originalRow);
        if (button.classList.contains('delete-customer-btn')) {
            if (currentUserRole !== USER_ROLES.SUPER_USER) return showNotification('ไม่ได้รับอนุญาต', 'คุณไม่มีสิทธิ์ลบข้อมูล', 'error');
            showConfirmationModal('ยืนยันการลบลูกค้า', `คุณแน่ใจหรือไม่ว่าต้องการลบข้อมูลลูกค้ารายนี้?`, () => {
                deleteCustomerRow(row, spreadsheetName, originalRowData);
            });
        } else if (button.classList.contains('edit-customer-btn')) {
            if (!currentUserRole) { return showLoginModal(); }
            if (activeEditingRow && activeEditingRow !== row) { return showNotification('ข้อควรระวัง', 'โปรดบันทึกหรือยกเลิกการแก้ไขแถวก่อนหน้านี้ก่อน', 'warning'); }
            activeEditingRow = row;
            toggleRowEditMode(row, true, originalRowData);
        } else if (button.classList.contains('save-customer-btn')) {
            await saveCustomerRow(row, spreadsheetName, originalRowData);
            activeEditingRow = null;
        } else if (button.classList.contains('cancel-customer-btn')) {
            toggleRowEditMode(row, false, originalRowData);
            activeEditingRow = null;
        } else if (button.classList.contains('view-comment-history-btn')) {
            const commentCell = button.closest('td');
            showCommentHistory(commentCell ? commentCell.dataset.fullComment.replace(/&apos;/g, "'") : '', false);
        } else if (button.classList.contains('edit-comment-btn')) {
            activeEditingRow = row;
            const commentInput = row.querySelector('input[data-field-name="comment"]');
            showCommentHistory(commentInput ? commentInput.value : '', true);
        } else if (button.classList.contains('edit-used-product-btn')) {
            activeEditingRow = row;
            const hiddenInput = row.querySelector('input[data-field-name="usedProduct"]');
            showProductSelectionModal(hiddenInput.value);
        }
    });

    usersDataTable.addEventListener('click', async e => {
        const button = e.target.closest('button');
        if (!button) return;
        if (button.classList.contains('edit-user-btn')) {
            const userData = { username: button.dataset.username, role: button.dataset.role, allowedSheets: button.dataset.allowedSheets ? button.dataset.allowedSheets.split(',').map(s => s.trim()) : [] };
            showEditUserModal(userData);
        } else if (button.classList.contains('delete-user-btn')) {
            const usernameToDelete = button.dataset.username;
            showConfirmationModal('ยืนยันการลบผู้ใช้', `คุณแน่ใจหรือไม่ว่าต้องการลบผู้ใช้ "${usernameToDelete}"?`, () => {
                google.script.run.withSuccessHandler(res => {
                    showNotification(res.success ? 'สำเร็จ!' : 'ข้อผิดพลาด', res.message, res.success ? 'success' : 'error');
                    if (res.success) loadUsers();
                }).withFailureHandler(err => showNotification('ข้อผิดพลาด', err.message, 'error')).deleteUser(usernameToDelete);
            });
        }
    });
    addProductBtn.addEventListener('click', () => showAddProductModal());
    productSettingsTableBody.addEventListener('click', async e => {
        const button = e.target.closest('button');
        if (!button) return;
        if (button.classList.contains('edit-product-btn')) {
            const product = { name: button.dataset.name, type: button.dataset.type };
            showAddProductModal(product);
        } else if (button.classList.contains('delete-product-btn')) {
            const productName = button.dataset.name;
            showConfirmationModal('ยืนยันการลบรายการ', `คุณแน่ใจหรือไม่ว่าต้องการลบ "${productName}"?`, () => {
                google.script.run.withSuccessHandler(res => {
                    if (res.success) {
                        showNotification('สำเร็จ!', res.message, 'success');
                        google.script.run.withSuccessHandler(productRes => {
                            if (productRes.success) { AVAILABLE_PRODUCTS = productRes.data; loadProductSettingsTable(); populateProductSelectionDropdown(); }
                        }).getAvailableProductsFromSheet();
                    } else {
                        showNotification('ข้อผิดพลาด', res.message, 'error');
                    }
                }).withFailureHandler(err => showNotification('ข้อผิดพลาด', err.message, 'error')).deleteProductFromSheet(productName);
            });
        }
    });
    
    messageBoxOverlay.addEventListener('click', hideMessageBox);
    closeLoginModalButton.addEventListener('click', hideLoginModal);
    loginModalOverlay.addEventListener('click', hideLoginModal);
    cancelEditUserButton.addEventListener('click', hideEditUserModal);
    editUserModalOverlay.addEventListener('click', hideEditUserModal);
    commentHistoryClose.addEventListener('click', hideCommentHistory);
    commentHistoryModalOverlay.addEventListener('click', hideCommentHistory);
    cancelProductSelectionButton.addEventListener('click', hideProductSelectionModal);
    productSelectionModalOverlay.addEventListener('click', hideProductSelectionModal);
    cancelAddProductBtn.addEventListener('click', hideAddProductModal);
    addProductModalOverlay.addEventListener('click', hideAddProductModal);

    saveNewCommentButton.addEventListener('click', () => {
        hideFormErrors(commentHistoryModal);
        const newComment = newCommentTextarea.value.trim();
        if (!newComment) return showFormError(newCommentTextarea, newCommentTextareaError, 'กรุณากรอกคอมเม้นท์');
        if (activeEditingRow) {
            const hiddenInput = activeEditingRow.querySelector('input[data-field-name="comment"]');
            if (hiddenInput) {
                const oldComment = hiddenInput.value;
                const timestamp = new Date().toISOString().slice(0, 19).replace('T', ' ');
                const formattedNewComment = `[${timestamp} โดย ${currentUsername}]: ${newComment}`;
                hiddenInput.value = oldComment ? `${formattedNewComment}\n${oldComment}` : formattedNewComment;
            }
            showNotification('บันทึกคอมเม้น', 'คอมเม้นท์ใหม่ถูกเตรียมไว้แล้ว', 'info');
            hideCommentHistory();
        }
    });
    saveProductSelectionButton.addEventListener('click', () => {
        if (activeEditingRow) {
            const hiddenInput = activeEditingRow.querySelector('input[data-field-name="usedProduct"]');
            if (hiddenInput) hiddenInput.value = JSON.stringify(selectedCustomerProducts);
            showNotification('บันทึกสินค้า', 'รายการสินค้าถูกเตรียมไว้แล้ว', 'info');
            hideProductSelectionModal();
        } else {
            applySelectedProductsToForm();
        }
    });
    addProductItemButton.addEventListener('click', addProductItem);
    productTypeSelect.addEventListener('change', () => { filterAndPopulateProductDropdown(); updateProductModalFieldsVisibility(); });

    addProductForm.addEventListener('submit', async e => {
        e.preventDefault();
        hideFormErrors(addProductForm);
        if (!validateField(newProductNameInput, newProductNameError, 'กรุณากรอกชื่อ') || !validateField(newProductTypeSelect, newProductTypeError, 'กรุณาเลือกประเภท')) {
            return showNotification('ข้อผิดพลาด', 'กรุณากรอกข้อมูลให้ครบถ้วน', 'error');
        }
        const submitButton = addProductForm.querySelector('button[type="submit"]');
        toggleButtonLoadingState(submitButton, addProductFormButtonText, addProductSpinner, 'บันทึก', 'กำลังบันทึก...', null, true);
        const originalName = originalProductNameInput.value.trim();
        const newName = newProductNameInput.value.trim();
        const newType = newProductTypeSelect.value;
        const backendFunction = originalName ? 'updateProductInSheet' : 'addProductToSheet';
        const params = originalName ? [originalName, newName, newType] : [{ name: newName, type: newType }];
        google.script.run.withSuccessHandler(res => {
            if(res.success) {
                showNotification('สำเร็จ!', res.message, 'success');
                hideAddProductModal();
                google.script.run.withSuccessHandler(productRes => {
                    if (productRes.success) { AVAILABLE_PRODUCTS = productRes.data; loadProductSettingsTable(); populateProductSelectionDropdown(); }
                }).getAvailableProductsFromSheet();
            } else {
                showNotification('ข้อผิดพลาด', res.message, 'error');
            }
            toggleButtonLoadingState(submitButton, addProductFormButtonText, addProductSpinner, 'บันทึก', 'กำลังบันทึก...', null, false);
        }).withFailureHandler(err => {
            showNotification('ข้อผิดพลาด', err.message, 'error');
            toggleButtonLoadingState(submitButton, addProductFormButtonText, addProductSpinner, 'บันทึก', 'กำลังบันทึก...', null, false);
        })[backendFunction](...params);
    });

    document.querySelectorAll('[data-tooltip]').forEach(el => {
        el.addEventListener('mouseenter', e => {
            customTooltip.textContent = e.currentTarget.dataset.tooltip;
            customTooltip.style.opacity = '1';
            const rect = e.currentTarget.getBoundingClientRect();
            customTooltip.style.left = `${rect.right + 10}px`;
            customTooltip.style.top = `${rect.top + rect.height / 2 - customTooltip.offsetHeight / 2}px`;
        });
        el.addEventListener('mouseleave', () => { customTooltip.style.opacity = '0'; });
    });
    let isDragging = false, startX, scrollLeft;
    if (customerTableContainer) {
        customerTableContainer.addEventListener('mousedown', e => {
            if (['INPUT', 'SELECT', 'TEXTAREA', 'BUTTON', 'A'].includes(e.target.tagName) || e.target.closest('th.sortable')) return;
            isDragging = true;
            customerTableContainer.classList.add('active-drag');
            startX = e.pageX - customerTableContainer.offsetLeft;
            scrollLeft = customerTableContainer.scrollLeft;
            e.preventDefault();
        });
        customerTableContainer.addEventListener('mouseleave', () => { isDragging = false; customerTableContainer.classList.remove('active-drag'); });
        customerTableContainer.addEventListener('mouseup', () => { isDragging = false; customerTableContainer.classList.remove('active-drag'); });
        customerTableContainer.addEventListener('mousemove', e => {
            if (!isDragging) return;
            e.preventDefault();
            const x = e.pageX - customerTableContainer.offsetLeft;
            const walk = (x - startX) * 1.5;
            customerTableContainer.scrollLeft = scrollLeft - walk;
        });
    }
    
    [growthReportTab, statusReportTab, contactPerformanceReportTab, productUsageReportTab].forEach(tab => {
        if(tab) tab.addEventListener('click', e => {
            document.querySelectorAll('.report-tab-button').forEach(btn => btn.classList.remove('active'));
            e.currentTarget.classList.add('active');
            generateReport();
        });
    });
    
    generateReportButton.addEventListener('click', generateReport);
    reportSpreadsheetSelect.addEventListener('change', generateReport);
    reportTimeframe.addEventListener('change', generateReport);
    inactiveDaysFilter.addEventListener('change', () => {
        if (document.querySelector('#contactPerformanceReportTab.active')) {
            renderInactiveCustomersTable(inactiveCustomersDataGlobal, parseInt(inactiveDaysFilter.value));
        }
    });
    
    [productSettingsTab, activityLogTab].forEach(tab => {
      if(tab) tab.addEventListener('click', e => {
          document.querySelectorAll('.settings-tab-button').forEach(btn => btn.classList.remove('active'));
          e.currentTarget.classList.add('active');
          productSettingsContent.classList.toggle('hidden', e.currentTarget.id !== 'productSettingsTab');
          activityLogContent.classList.toggle('hidden', e.currentTarget.id !== 'activityLogTab');
          if(e.currentTarget.id === 'productSettingsTab') loadProductSettingsTable();
          else loadActivityLogs();
      });
    });
    
    activityLogSearchInput.addEventListener('keyup', () => renderActivityLogTable(activityLogSearchInput.value));
    // --- Main Form's Used Product Button Listeners ---
    usedProductDisplay.addEventListener('click', () => {
        activeEditingRow = null; 
        showProductSelectionModal(usedProductHiddenInput.value);
    });
    openProductSelectionModalButton.addEventListener('click', () => {
        activeEditingRow = null;
        showProductSelectionModal(usedProductHiddenInput.value);
    });
});
// --- END OF PART 5/5 ---
</script>
